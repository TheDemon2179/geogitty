document.addEventListener('DOMContentLoaded', () => {
	// 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ particlesJS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ DOMContentLoaded
	try {
		if (typeof particlesJS === 'function') {
			particlesJS('particles-js', {
				particles: {
					number: { value: 80, density: { enable: true, value_area: 800 } },
					color: { value: '#4f46e5' },
					shape: {
						type: 'circle',
						stroke: { width: 0, color: '#000000' },
						polygon: { nb_sides: 5 },
					},
					opacity: {
						value: 0.5,
						random: true,
						anim: { enable: true, speed: 1, opacity_min: 0.1, sync: false },
					},
					size: {
						value: 3,
						random: true,
						anim: { enable: true, speed: 2, size_min: 0.1, sync: false },
					},
					line_linked: {
						enable: true,
						distance: 150,
						color: '#4f46e5',
						opacity: 0.2,
						width: 1,
					},
					move: {
						enable: true,
						speed: 1,
						direction: 'none',
						random: true,
						straight: false,
						out_mode: 'out',
						bounce: false,
						attract: { enable: true, rotateX: 600, rotateY: 1200 },
					},
				},
				interactivity: {
					detect_on: 'canvas',
					events: {
						onhover: { enable: true, mode: 'grab' },
						onclick: { enable: true, mode: 'push' },
						resize: true,
					},
					modes: {
						grab: { distance: 140, line_linked: { opacity: 0.5 } },
						bubble: {
							distance: 400,
							size: 40,
							duration: 2,
							opacity: 8,
							speed: 3,
						},
						repulse: { distance: 200, duration: 0.4 },
						push: { particles_nb: 4 },
						remove: { particles_nb: 2 },
					},
				},
				retina_detect: true,
			})
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ particlesJS:', error)
		// –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç #particles-js, –µ—Å–ª–∏ –æ–Ω –º–µ—à–∞–µ—Ç –±–µ–∑ —Å–∫—Ä–∏–ø—Ç–∞
		const particlesElement = document.getElementById('particles-js')
		if (particlesElement) particlesElement.style.display = 'none'
	}

	// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
	const questionEl = document.getElementById('question')
	const optionsEl = document.getElementById('options')
	const feedbackEl = document.getElementById('feedback')
	const nextBtn = document.getElementById('next-btn')
	const scoreEl = document.getElementById('score')
	const streakEl = document.getElementById('streak')
	const progressEl = document.getElementById('progress')
	const modeBtns = document.querySelectorAll(
		'.mode-btn:not(#create-challenge-btn):not(#share-challenge-btn)'
	) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞
	const gameContainer = document.querySelector('.game-container')
	const gameInterface = document.getElementById('game-interface')
	const endGameScreen = document.getElementById('end-game-screen')
	const finalScoreEl = document.getElementById('final-score')
	const playAgainBtn = document.getElementById('play-again-btn')
	const challengeInfoEl = document.getElementById('challenge-info')
	const challengeNameEl = document.getElementById('challenge-name')
	const createChallengeBtn = document.getElementById('create-challenge-btn')
	const shareChallengeBtn = document.getElementById('share-challenge-btn')

	let playedQuestionIds = [] // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –ø–æ–∫–∞–∑–∞

	// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ) ---
	let currentHealth = 3
	let timePerQuestion = 0 // 0 - —Ç–∞–π–º–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω
	let questionTimerInterval = null
	let nickname = ''
	let gameSettings = {
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		rounds: 10,
		health: 3,
		time: 0,
		nickname: '',
	}

	// --- –ü–µ—Ä–µ–≤–æ–¥—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª/–æ–±—ä–µ–∫—Ç) ---
	const translations = {
		ru: {
			tagline:
				'–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö –≤–µ—Å–µ–ª—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω! –£–≥–∞–¥—ã–≤–∞–π —Å—Ç–æ–ª–∏—Ü—ã, —Å—Ç—Ä–∞–Ω—ã, —Ñ–ª–∞–≥–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.',
			score: '–°—á–µ—Ç',
			streak: '–°–µ—Ä–∏—è',
			loading: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...',
			nextQuestion: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
			capitals: '–°—Ç–æ–ª–∏—Ü—ã',
			countries: '–°—Ç—Ä–∞–Ω—ã',
			flags: '–§–ª–∞–≥–∏',
			landmarks: '–ú–µ—Å—Ç–∞',
			correctFeedback: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ',
			incorrectFeedback: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
			gameOver: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!',
			yourScore: '–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç',
			playAgain: '–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞',
			challengeLoadingError: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞.',
			questionLoadError: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–∞: ',
			challengeCreated: '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
			challengeCreationError: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂.',
			createChallenge: '–°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂',
			shareResults: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
			challengePrefix: '–ß–µ–ª–ª–µ–Ω–¥–∂: ',
			health: '–ó–¥–æ—Ä–æ–≤—å–µ',
			timeRemaining: '–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏',
			settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
			nickname: '–ù–∏–∫–Ω–µ–π–º',
			roundsCount: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤',
			healthCount: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π (–æ—à–∏–±–æ–∫)',
			timePerRound: '–í—Ä–µ–º—è –Ω–∞ —Ä–∞—É–Ω–¥ (—Å–µ–∫—É–Ω–¥, 0 - –≤—ã–∫–ª)',
			save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
			leaderboard: '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–õ–æ–∫–∞–ª—å–Ω–∞—è)',
			clearLeaderboard: '–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É',
			leaderboardEmpty: '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –°—ã–≥—Ä–∞–π—Ç–µ –∏–≥—Ä—É!',
			challengeFrom: (name, score) =>
				`${name} –±—Ä–æ—Å–∞–µ—Ç –≤–∞–º –≤—ã–∑–æ–≤! –ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}`,
			rank: '–ú–µ—Å—Ç–æ',
			confirmClearLeaderboard:
				'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.',
			questionsCount: count => {
				// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
				const cases = [2, 0, 1, 1, 1, 2]
				const titles = ['–≤–æ–ø—Ä–æ—Å', '–≤–æ–ø—Ä–æ—Å–∞', '–≤–æ–ø—Ä–æ—Å–æ–≤']
				return titles[
					count % 100 > 4 && count % 100 < 20
						? 2
						: cases[Math.min(count % 10, 5)]
				]
			},
			// –î–æ–±–∞–≤—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
			mode_capitals: '–°—Ç–æ–ª–∏—Ü—ã',
			mode_countries: '–°—Ç—Ä–∞–Ω—ã',
			mode_flags: '–§–ª–∞–≥–∏',
			mode_landmarks: '–ú–µ—Å—Ç–∞',
			timeExpiredFeedback: '–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
		},
		// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 'en' –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ–∑–∂–µ
	}
	const currentLang = 'ru' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
	function _(key) {
		return translations[currentLang][key] || key
	}

	const settingsBtn = document.getElementById('settings-btn')
	const leaderboardBtn = document.getElementById('leaderboard-btn')
	const settingsModal = document.getElementById('settings-modal')
	const leaderboardModal = document.getElementById('leaderboard-modal')
	const closeSettingsBtn = document.getElementById('close-settings-btn')
	const closeLeaderboardBtn = document.getElementById('close-leaderboard-btn')
	const nicknameInput = document.getElementById('nickname-input')
	const roundsInput = document.getElementById('rounds-input')
	const healthInput = document.getElementById('health-input')
	const timeInput = document.getElementById('time-input')
	const saveSettingsBtn = document.getElementById('save-settings-btn')
	const healthEl = document.getElementById('health')
	const timerContainer = document.querySelector('.timer-container')
	const timerEl = document.getElementById('timer')
	const timerBar = document.getElementById('timer-bar')
	const leaderboardList = document.getElementById('leaderboard-list')
	const clearLeaderboardBtn = document.getElementById('clear-leaderboard-btn')
	const challengeCreatorInfoEl = document.getElementById(
		'challenge-creator-info'
	)

	// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
	const SETTINGS_KEY = 'geogittySettings'
	const LEADERBOARD_KEY = 'geogittyLeaderboard'
	const MAX_LEADERBOARD_ENTRIES = 15 // –ú–∞–∫—Å. –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å data-translate
	function applyTranslations() {
		document.querySelectorAll('[data-translate]').forEach(el => {
			const key = el.getAttribute('data-translate')
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º innerText –∏–ª–∏ textContent –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
			if (
				el.tagName === 'BUTTON' ||
				el.tagName === 'P' ||
				el.tagName === 'SPAN' ||
				el.tagName === 'DIV' ||
				el.tagName === 'H2'
			) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ –Ω–µ—Ç, –º–µ–Ω—è–µ–º textContent.
				// –ï—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ —É score/streak), —Ç–æ –∏—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª.
				if (
					el.childNodes.length === 1 &&
					el.childNodes[0].nodeType === Node.TEXT_NODE
				) {
					el.textContent = _(key)
				} else {
					// –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–º–µ—à–∞–Ω —Å –∏–∫–æ–Ω–∫–∞–º–∏/span'–∞–º–∏
					// –ü–æ–∫–∞ –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –∏ –º–µ–Ω—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
					for (let node of el.childNodes) {
						if (
							node.nodeType === Node.TEXT_NODE &&
							node.textContent.trim().length > 0
						) {
							node.textContent =
								_(key) + (['score', 'streak'].includes(key) ? ': ' : '') // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è —Å—á–µ—Ç–∞/—Å–µ—Ä–∏–∏
							break
						}
					}
				}
			} else if (el.tagName === 'INPUT' && el.type === 'submit') {
				el.value = _(key)
			} else {
				// –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
				el.textContent = _(key)
			}
		})
		// –û–±–Ω–æ–≤–ª—è–µ–º title –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
		const createChallengeTitleKey = 'createChallengeTitle' // –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è title, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if (
			createChallengeBtn &&
			translations[currentLang][createChallengeTitleKey]
		) {
			createChallengeBtn.title =
				translations[currentLang][createChallengeTitleKey]
		} else if (createChallengeBtn) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ title –Ω–µ –Ω–∞–π–¥–µ–Ω
			createChallengeBtn.title =
				'–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
		}
	}

	// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
	let currentQuestion = {}
	let acceptingAnswers = true
	let score = 0
	let streak = 0
	let questionCounter = 0
	let allQuestions = [] // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞/—á–µ–ª–ª–µ–Ω–¥–∂–∞
	let availableQuestions = [] // –í–æ–ø—Ä–æ—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
	let questionHistory = [] // ID –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ (–¥–ª—è —à–∞—Ä–∏–Ω–≥–∞)
	let currentMode = 'capitals' // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	let currentChallengeParams = null // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ {mode: string, ids: string[], name: string}
	const MAX_QUESTIONS = 10 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏–≥—Ä–µ

	// --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON ---
	async function loadQuestions(mode) {
		try {
			const response = await fetch(`data/${mode}.json?v=${Date.now()}`) // –î–æ–±–∞–≤–ª—è–µ–º ?v=timestamp –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}
			const data = await response.json()
			if (!Array.isArray(data)) {
				throw new Error('Data is not an array')
			}
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID —É –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ö–æ—Ç—è –±—ã —É –ø–µ—Ä–≤–æ–≥–æ)
			if (data.length > 0 && typeof data[0].id === 'undefined') {
				console.warn(
					`–í–æ–ø—Ä–æ—Å—ã –≤ —Ñ–∞–π–ª–µ data/${mode}.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª—è 'id'. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`
				)
			}
			return data
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ ${mode}:`, error)
			feedbackEl.textContent = `${_('questionLoadError')}${mode}. ${
				error.message
			}`
			feedbackEl.className = 'feedback incorrect-feedback'
			return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		}
	}

	// --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---

	// –ù–∞—á–∞–ª–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
	async function startGame() {
		loadSettings()
		playedQuestionIds = []
		// ... (—Å–±—Ä–æ—Å score, streak, health) ...

		allQuestions = await loadQuestions(currentMode)

		let questionsForGame = []
		const maxQuestionsForMode = allQuestions.length

		if (currentChallengeParams) {
			// *** –†–ï–ñ–ò–ú –ß–ï–õ–õ–ï–ù–î–ñ–ê ***
			console.log(
				'[Challenge Start] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ–ª–ª–µ–Ω–¥–∂–∞:',
				JSON.stringify(currentChallengeParams)
			) // << LOG
			challengeInfoEl.style.display = 'block'
			challengeNameEl.textContent =
				currentChallengeParams.name ||
				`${_('challengePrefix')}${_(currentMode)}`

			if (
				currentChallengeParams.creator &&
				currentChallengeParams.creatorScore !== undefined
			) {
				challengeCreatorInfoEl.textContent = _('challengeFrom', [
					currentChallengeParams.creator,
					currentChallengeParams.creatorScore,
				])
				challengeCreatorInfoEl.style.display = 'block'
			}

			currentHealth =
				currentChallengeParams.health !== undefined
					? currentChallengeParams.health
					: gameSettings.health
			timePerQuestion =
				currentChallengeParams.time !== undefined
					? currentChallengeParams.time
					: gameSettings.time
			healthEl.innerText = currentHealth

			// –°–æ–∑–¥–∞–µ–º –£–ü–û–†–Ø–î–û–ß–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ ID –∏–∑ URL
			const questionsMap = new Map(allQuestions.map(q => [q.id, q]))
			console.log(
				`[Challenge Start] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${questionsMap.size} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ ${currentMode}.`
			) // << LOG
			console.log(
				`[Challenge Start] –¢—Ä–µ–±—É–µ–º—ã–µ ID –∏–∑ URL: ${currentChallengeParams.ids.join(
					', '
				)}`
			) // << LOG

			questionsForGame = currentChallengeParams.ids
				.map(id => questionsMap.get(id)) // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ ID –≤ –ø–æ—Ä—è–¥–∫–µ –∏–∑ URL
				.filter(q => q !== undefined) // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ
			console.log(
				`[Challenge Start] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–≥—Ä—ã (questionsForGame) –¥–ª–∏–Ω–æ–π ${questionsForGame.length}:`,
				questionsForGame.map(q => q.id).join(', ')
			) // << LOG

			if (questionsForGame.length !== currentChallengeParams.ids.length) {
				console.warn(
					'[Challenge Start] –ù–µ –≤—Å–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
				)
			}
			if (questionsForGame.length === 0) {
				questionEl.textContent = _('challengeLoadingError')
				optionsEl.innerHTML = ''
				return
			}
			questionHistory = questionsForGame.map(q => q.id) // –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
		} else {
			// *** –û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú ***
			console.log('[Normal Start] –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã.') // << LOG
			// ... (–ª–æ–≥–∏–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞) ...
			const count = Math.min(gameSettings.rounds, maxQuestionsForMode)
			questionsForGame = getRandomQuestions(allQuestions, count)
			console.log(
				`[Normal Start] –í—ã–±—Ä–∞–Ω–æ ${questionsForGame.length} —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:`,
				questionsForGame.map(q => q.id).join(', ')
			) // << LOG
			questionHistory = questionsForGame.map(q => q.id)
		}

		// –ö–æ–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (—ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è)
		availableQuestions = [...questionsForGame] // << –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢! availableQuestions –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –£–ü–û–†–Ø–î–û–ß–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –≤ —Ä–µ–∂–∏–º–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞
		console.log(
			`[StartGame] –ò—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ availableQuestions –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:`,
			availableQuestions.map(q => q.id).join(', ')
		) // << LOG

		if (availableQuestions.length === 0) {
			questionEl.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.'
			optionsEl.innerHTML = ''
			return
		}

		getNewQuestion() // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
	}

	// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ N –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
	function getRandomQuestions(sourceArray, count) {
		const shuffled = [...sourceArray].sort(() => 0.5 - Math.random())
		return shuffled.slice(0, Math.min(count, sourceArray.length))
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	function getNewQuestion() {
		stopTimer()

		if (availableQuestions.length === 0) {
			console.log('[getNewQuestion] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.') // << LOG
			return showEndGame()
		}
		console.log(
			`[getNewQuestion] –û—Å—Ç–∞–ª–æ—Å—å ${availableQuestions.length} –≤–æ–ø—Ä–æ—Å–æ–≤. –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —á–µ–ª–ª–µ–Ω–¥–∂–∞:`,
			!!currentChallengeParams
		) // << LOG
		console.log(
			`[getNewQuestion] availableQuestions –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º:`,
			availableQuestions.map(q => q.id).join(', ')
		) // << LOG

		questionCounter++
		const totalQuestionsInGame = questionHistory.length
		progressEl.style.width =
			totalQuestionsInGame > 0
				? `${(questionCounter / totalQuestionsInGame) * 100}%`
				: '0%'

		// *** –í–´–ë–û–† –í–û–ü–†–û–°–ê (–ß–µ–ª–ª–µ–Ω–¥–∂ vs –û–±—ã—á–Ω—ã–π) ***
		if (currentChallengeParams) {
			// –í —Ä–µ–∂–∏–º–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –±–µ—Ä–µ–º –°–¢–†–û–ì–û –ø–æ –ø–æ—Ä—è–¥–∫—É
			console.log('[getNewQuestion] –†–µ–∂–∏–º —á–µ–ª–ª–µ–Ω–¥–∂–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º shift()') // << LOG
			currentQuestion = availableQuestions.shift() // –ë–µ—Ä–µ–º –∏ —É–¥–∞–ª—è–µ–º –ü–ï–†–í–´–ô —ç–ª–µ–º–µ–Ω—Ç
			console.log(
				'[getNewQuestion] –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å (—á–µ–ª–ª–µ–Ω–¥–∂):',
				currentQuestion ? currentQuestion.id : 'undefined'
			) // << LOG
		} else {
			// –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ
			console.log('[getNewQuestion] –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º random') // << LOG
			const questionIndex = Math.floor(
				Math.random() * availableQuestions.length
			)
			currentQuestion = availableQuestions[questionIndex]
			console.log(
				'[getNewQuestion] –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å (–æ–±—ã—á–Ω—ã–π):',
				currentQuestion ? currentQuestion.id : 'undefined',
				`—Å –∏–Ω–¥–µ–∫—Å–æ–º ${questionIndex}`
			) // << LOG

			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å—ã–≥—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
			if (currentQuestion && currentQuestion.id) {
				playedQuestionIds.push(currentQuestion.id)
			}

			// –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ availableQuestions
			if (questionIndex > -1) {
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
				availableQuestions.splice(questionIndex, 1)
			} else if (currentQuestion) {
				// –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
				const actualIndex = availableQuestions.findIndex(
					q => q === currentQuestion
				)
				if (actualIndex > -1) availableQuestions.splice(actualIndex, 1)
			}
		}
		// *** –ö–û–ù–ï–¶ –í–´–ë–û–†–ê –í–û–ü–†–û–°–ê ***

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å
		if (!currentQuestion) {
			console.error('[getNewQuestion] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å currentQuestion!')
			return showEndGame()
		}
		console.log(
			`[getNewQuestion] availableQuestions –ü–û–°–õ–ï –≤—ã–±–æ—Ä–∞/—É–¥–∞–ª–µ–Ω–∏—è:`,
			availableQuestions.map(q => q.id).join(', ')
		) // << LOG

		// --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ getNewQuestion ---
		// (–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞, –æ–ø—Ü–∏–π, –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏ —Ç.–¥.)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
		if (
			!currentQuestion ||
			typeof currentQuestion.question !== 'string' ||
			!Array.isArray(currentQuestion.options) ||
			typeof currentQuestion.answer !== 'number'
		) {
			console.error(
				'[getNewQuestion] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞:',
				currentQuestion
			)
			return getNewQuestion() // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
		}

		// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ + —Ñ–ª–∞–≥–∞ (–µ—Å–ª–∏ —Ä–µ–∂–∏–º 'flags')
		if (currentMode === 'flags' && currentQuestion.countryCode) {
			const flagUrl = `https://flagcdn.com/w160/${currentQuestion.countryCode.toLowerCase()}.png`
			questionEl.innerHTML = `
            ${currentQuestion.question}<br>
            <img src="${flagUrl}" alt="–§–ª–∞–≥" style="height: 80px; margin-top: 10px; border: 1px solid #ccc; border-radius: 5px;">
        `
		} else {
			questionEl.innerText = currentQuestion.question
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π
		optionsEl.innerHTML = ''
		currentQuestion.options.forEach((option, index) => {
			const optionElement = document.createElement('div')
			optionElement.classList.add('option')
			optionElement.dataset.option = index + 1
			optionElement.innerText = option
			optionElement.addEventListener('click', selectAnswer)
			optionsEl.appendChild(optionElement)
		})

		acceptingAnswers = true
		feedbackEl.innerText = ''
		feedbackEl.className = 'feedback'
		nextBtn.style.display = 'none'
		optionsEl.querySelectorAll('.option').forEach(opt => {
			opt.classList.remove('correct', 'incorrect')
			opt.style.pointerEvents = 'auto'
		})

		// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
		if (timePerQuestion > 0) {
			startTimer(timePerQuestion)
		} else {
			timerContainer.style.display = 'none'
		}
	}

	// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
	function selectAnswer(e) {
		if (!acceptingAnswers) return
		acceptingAnswers = false
		stopTimer() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞

		const selectedOption = e.target
		const selectedAnswer = parseInt(selectedOption.dataset.option)
		const isCorrect = selectedAnswer === currentQuestion.answer

		if (isCorrect) {
			incrementScore()
			incrementStreak()
			feedbackEl.innerText = _('correctFeedback')
			feedbackEl.className = 'feedback correct-feedback'
			selectedOption.classList.add('correct')
			createConfetti()
			nextBtn.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
		} else {
			feedbackEl.innerText = `${_('incorrectFeedback')}${
				currentQuestion.options[currentQuestion.answer - 1]
			}`
			feedbackEl.className = 'feedback incorrect-feedback'
			selectedOption.classList.add('incorrect')

			// –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
			const correctOption = optionsEl.querySelector(
				`.option[data-option="${currentQuestion.answer}"]`
			)
			if (correctOption) {
				correctOption.classList.add('correct')
			}

			handleIncorrectAnswer() // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç (–∑–¥–æ—Ä–æ–≤—å–µ, —Å–µ—Ä–∏—è, –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –∏–ª–∏ –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã)
		}

		// –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
		optionsEl.querySelectorAll('.option').forEach(opt => {
			opt.style.pointerEvents = 'none'
		})
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
	function showEndGame() {
		stopTimer() // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
		gameInterface.style.display = 'none'
		finalScoreEl.innerText = score
		endGameScreen.style.display = 'block'

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º
		saveResultToLeaderboard()

		// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º" (—Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂),
		// –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –≤ –Ω–µ–π –±—ã–ª–∏ –≤–æ–ø—Ä–æ—Å—ã.
		if (questionHistory.length > 0) {
			shareChallengeBtn.style.display = 'inline-block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥ —Å "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
		} else {
			shareChallengeBtn.style.display = 'none'
		}
	}

	// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞
	function incrementScore() {
		// –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤: +100 –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, +50 –∑–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–µ—Ä–∏–∏
		score += 100 + streak * 50
		scoreEl.innerText = score
	}

	// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
	function incrementStreak() {
		streak++
		streakEl.innerText = streak
	}

	// –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	function createConfetti() {
		// ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ createConfetti)
		for (let i = 0; i < 30; i++) {
			// –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
			const confetti = document.createElement('div')
			confetti.classList.add('confetti')
			// –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ game-container –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
			confetti.style.position = 'absolute' // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è
			confetti.style.top = Math.random() * 50 + '%' // –ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–≤–µ—Ä—Ö—É
			confetti.style.left = Math.random() * 100 + '%'
			confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 60%)`
			confetti.style.width = Math.random() * 8 + 4 + 'px'
			confetti.style.height = confetti.style.width // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–ª–∏ –∫—Ä—É–≥–ª—ã–µ
			confetti.style.opacity = '1'
			confetti.style.borderRadius = '50%'

			gameContainer.appendChild(confetti) // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä—å game-container

			// –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
			const animation = confetti.animate(
				[
					{ transform: 'translateY(0px) rotate(0deg)', opacity: 1 },
					{
						transform: `translateY(${gameContainer.offsetHeight}px) rotate(${
							Math.random() * 720 - 360
						}deg)`, // –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
						opacity: 0,
					},
				],
				{
					duration: Math.random() * 2000 + 1500, // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
					easing: 'ease-out', // –ü–∞–¥–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π
				}
			)

			animation.onfinish = () => confetti.remove()
		}
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π ---

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
	function getChallengeParamsFromURL() {
		const params = new URLSearchParams(window.location.search)
		const challengeData = params.get('challenge')
		const challengeName = params.get('name')
		const creatorNickname = params.get('creator')
		const creatorScoreParam = params.get('creatorScore')
		const roundsParam = params.get('rounds')
		const healthParam = params.get('health')
		const timeParam = params.get('time')

		if (!challengeData) return null

		try {
			const parts = challengeData.split(',')
			if (parts.length < 2) return null

			const mode = parts[0]
			const ids = parts.slice(1).filter(id => id.trim() !== '')

			if (
				!['capitals', 'countries', 'flags', 'landmarks'].includes(mode) ||
				ids.length === 0
			) {
				console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'challenge':", challengeData)
				return null
			}

			const challengeParams = {
				mode,
				ids,
				name: challengeName ? decodeURIComponent(challengeName) : null,
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
			if (creatorNickname) {
				challengeParams.creator = decodeURIComponent(creatorNickname)
				const scoreValue = parseInt(creatorScoreParam)
				if (!isNaN(scoreValue)) {
					challengeParams.creatorScore = scoreValue
				}
			}
			// (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
			const rounds = parseInt(roundsParam)
			if (!isNaN(rounds) && rounds >= 3 && rounds <= 50) {
				challengeParams.rounds = rounds
			}
			const health = parseInt(healthParam)
			if (!isNaN(health) && health >= 1 && health <= 10) {
				challengeParams.health = health
			}
			const time = parseInt(timeParam)
			if (!isNaN(time) && time >= 0 && time <= 60) {
				challengeParams.time = time
			}

			return challengeParams
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'challenge':", error)
			return null
		}
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
	// –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤
	function _(key, args) {
		// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
		const translationData = translations[currentLang]
			? translations[currentLang][key]
			: null

		if (typeof translationData === 'function') {
			// –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è (–∫–∞–∫ questionsCount), –≤—ã–∑—ã–≤–∞–µ–º –µ–µ
			try {
				// –ü–µ—Ä–µ–¥–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
				const argsArray = Array.isArray(args)
					? args
					: args !== undefined
					? [args]
					: []
				return translationData(...argsArray)
			} catch (e) {
				console.error(
					`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –∫–ª—é—á–∞ "${key}":`,
					e
				)
				return key // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –ø—Ä–∏ –æ—à–∏–±–∫–µ
			}
		} else if (typeof translationData === 'string') {
			// –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ - —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ
			// (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–∏–ø–∞ %s, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
			return translationData
		} else {
			// –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á
			return key
		}
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂
	async function generateAndCopyChallengeLink() {
		if (playedQuestionIds.length === 0) {
			alert('–ù–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞.')
			return
		}

		// *** –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é _ –¥–ª—è –≤—ã–∑–æ–≤–∞ questionsCount ***
		const questionCountText = _('questionsCount', playedQuestionIds.length)
		const defaultName = `${_('challengePrefix')}${_(currentMode)} (${
			playedQuestionIds.length
		} ${questionCountText})`

		const challengeName = prompt(
			'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞:',
			defaultName
		)

		if (challengeName === null) return

		const mode = currentMode
		const idsString = questionHistory.join(',')
		const encodedName = encodeURIComponent(challengeName)

		// –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL
		let url = `${window.location.origin}${window.location.pathname}?challenge=${mode},${idsString}&name=${encodedName}`

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤–æ –≤—Ä–µ–º—è —ç—Ç–æ–π –∏–≥—Ä—ã (gameSettings)
		url += `&rounds=${gameSettings.rounds}&health=${gameSettings.health}&time=${gameSettings.time}`

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ —Å—á–µ—Ç, –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if (nickname) {
			const encodedNickname = encodeURIComponent(nickname)
			// –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –Ω–∞ –º–æ–º–µ–Ω—Ç *–∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã*
			// score –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã,
			// –Ω–æ —Ç.–∫. –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –û–ö.
			url += `&creator=${encodedNickname}&creatorScore=${score}`
		}

		try {
			await navigator.clipboard.writeText(url)
			alert(_('challengeCreated'))
		} catch (err) {
			console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É: ', err)
			alert(_('challengeCreationError') + '\n' + url)
		}
	}
	// –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç translations:
	// ru: {
	//     ...
	//     questionsCount: (count) => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
	//         if (count % 10 === 1 && count % 100 !== 11) return '–≤–æ–ø—Ä–æ—Å';
	//         if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–≤–æ–ø—Ä–æ—Å–∞';
	//         return '–≤–æ–ø—Ä–æ—Å–æ–≤';
	//     },
	//     ...
	// }
	// –ò –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤:
	// const defaultName = `${_('challengePrefix')}${_(currentMode)} (${questionHistory.length} ${translations[currentLang].questionsCount(questionHistory.length)})`;

	// --- –§—É–Ω–∫—Ü–∏–∏ –ù–∞—Å—Ç—Ä–æ–µ–∫ ---
	function openSettingsModal() {
		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º
		nicknameInput.value = gameSettings.nickname
		roundsInput.value = gameSettings.rounds
		healthInput.value = gameSettings.health
		timeInput.value = gameSettings.time
		settingsModal.style.display = 'block'
	}

	function closeSettingsModal() {
		settingsModal.style.display = 'none'
	}

	function saveSettings() {
		const newNickname = nicknameInput.value.trim().slice(0, 20) // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
		const newRounds = parseInt(roundsInput.value) || 10
		const newHealth = parseInt(healthInput.value) || 3
		const newTime = parseInt(timeInput.value) || 0

		gameSettings = {
			nickname: newNickname,
			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
			rounds: Math.max(3, Math.min(50, newRounds)),
			health: Math.max(1, Math.min(10, newHealth)),
			time: Math.max(0, Math.min(60, newTime)),
		}

		try {
			localStorage.setItem(SETTINGS_KEY, JSON.stringify(gameSettings))
			nickname = gameSettings.nickname // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∏–∫–Ω–µ–π–º–∞
			console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', gameSettings)
			// –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			// alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
			// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ä–∞–∑—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)
			closeSettingsModal()
			// –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∏–¥–µ—Ç?
			// if (!acceptingAnswers && nextBtn.style.display === 'none' && endGameScreen.style.display === 'none') {
			//    startGame();
			// }
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage:', error)
			alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.')
		}
	}

	function loadSettings() {
		try {
			const savedSettings = localStorage.getItem(SETTINGS_KEY)
			if (savedSettings) {
				const parsedSettings = JSON.parse(savedSettings)
				// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä—è—è –∏—Ö —Ç–∏–ø –∏ –Ω–∞–ª–∏—á–∏–µ
				gameSettings.nickname =
					typeof parsedSettings.nickname === 'string'
						? parsedSettings.nickname.slice(0, 20)
						: ''
				gameSettings.rounds =
					typeof parsedSettings.rounds === 'number'
						? Math.max(3, Math.min(50, parsedSettings.rounds))
						: 10
				gameSettings.health =
					typeof parsedSettings.health === 'number'
						? Math.max(1, Math.min(10, parsedSettings.health))
						: 3
				gameSettings.time =
					typeof parsedSettings.time === 'number'
						? Math.max(0, Math.min(60, parsedSettings.time))
						: 0
				nickname = gameSettings.nickname // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
				console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', gameSettings)
			} else {
				console.log(
					'–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.'
				)
				// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ø—É—Ç—ã –≤ –º–æ–¥–∞–ª–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
				nicknameInput.value = gameSettings.nickname
				roundsInput.value = gameSettings.rounds
				healthInput.value = gameSettings.health
				timeInput.value = gameSettings.time
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage:', error)
			// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
			gameSettings = { rounds: 10, health: 3, time: 0, nickname: '' }
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∏–≥—Ä–µ
		currentHealth = gameSettings.health
		timePerQuestion = gameSettings.time
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
	settingsBtn.addEventListener('click', openSettingsModal)
	closeSettingsBtn.addEventListener('click', closeSettingsModal)
	saveSettingsBtn.addEventListener('click', saveSettings)

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–µ
	window.addEventListener('click', event => {
		if (event.target == settingsModal) {
			closeSettingsModal()
		}
		if (event.target == leaderboardModal) {
			closeLeaderboardModal()
		}
	})

	// --- –§—É–Ω–∫—Ü–∏–∏ –¢–∞–π–º–µ—Ä–∞ ---
	function startTimer(duration) {
		let timeLeft = duration
		timerContainer.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ç–∞–π–º–µ—Ä–∞
		timerEl.textContent = timeLeft
		timerBar.style.width = '100%'
		// –ë—ã—Å—Ç—Ä—ã–π transition –≤ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–≤–Ω–æ
		timerBar.style.transition = 'none'
		// –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
		timerBar.offsetHeight // reflow
		timerBar.style.transition = `width ${duration}s linear` // –ì–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞ –≤—Å—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		timerBar.style.width = '0%' // –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
		questionTimerInterval = setInterval(() => {
			timeLeft--
			timerEl.textContent = timeLeft
			if (timeLeft <= 0) {
				stopTimer()
				handleTimeOut()
			}
		}, 1000)
	}

	function stopTimer() {
		clearInterval(questionTimerInterval)
		questionTimerInterval = null
		timerBar.style.transition = 'none' // –û—Ç–∫–ª—é—á–∞–µ–º transition, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–∫–∞—á–∫–æ–≤ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ
	}

	function handleTimeOut() {
		if (!acceptingAnswers) return // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
		acceptingAnswers = false
		feedbackEl.innerText = _('timeExpiredFeedback', [
			_('timePerRound'),
			currentQuestion.options[currentQuestion.answer - 1],
		]) // –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á 'timeExpiredFeedback' –≤ –ø–µ—Ä–µ–≤–æ–¥—ã
		feedbackEl.className = 'feedback incorrect-feedback'

		// –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
		handleIncorrectAnswer() // –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
		const correctOption = optionsEl.querySelector(
			`.option[data-option="${currentQuestion.answer}"]`
		)
		if (correctOption) {
			correctOption.classList.add('correct')
		}
		// –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
		optionsEl.querySelectorAll('.option').forEach(opt => {
			opt.style.pointerEvents = 'none'
		})

		nextBtn.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
	}
	// –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–µ–≤–æ–¥—ã:
	// timeExpiredFeedback: '–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '

	// –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	function handleIncorrectAnswer() {
		streak = 0
		streakEl.innerText = streak
		currentHealth-- // –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
		healthEl.innerText = Math.max(0, currentHealth) // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º, –º–∏–Ω–∏–º—É–º 0

		// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Ç–µ—Ä–∏ –∑–¥–æ—Ä–æ–≤—å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä—è—Å–∫–∞)
		healthEl.parentElement.classList.add('shake')
		setTimeout(() => healthEl.parentElement.classList.remove('shake'), 500)

		if (currentHealth <= 0) {
			// –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—á–∏–ª–æ—Å—å, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ", –∞ —Å—Ä–∞–∑—É –∏–¥–µ–º –∫ –∫–æ–Ω—Ü—É –∏–≥—Ä—ã
			stopTimer()
			showEndGame()
		} else {
			nextBtn.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
		}
	}

	// --- –§—É–Ω–∫—Ü–∏–∏ –õ–∏–¥–µ—Ä–±–æ—Ä–¥–∞ ---
	function openLeaderboardModal() {
		displayLeaderboard()
		leaderboardModal.style.display = 'block'
	}

	function closeLeaderboardModal() {
		leaderboardModal.style.display = 'none'
	}

	function loadLeaderboard() {
		try {
			const data = localStorage.getItem(LEADERBOARD_KEY)
			return data ? JSON.parse(data) : []
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error)
			return []
		}
	}

	function saveResultToLeaderboard() {
		if (questionHistory.length === 0 || !nickname) {
			return
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
		let gameHealthSetting, gameTimeSetting
		if (currentChallengeParams) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ –≤ URL)
			gameHealthSetting =
				currentChallengeParams.health !== undefined
					? currentChallengeParams.health
					: gameSettings.health
			gameTimeSetting =
				currentChallengeParams.time !== undefined
					? currentChallengeParams.time
					: gameSettings.time
		} else {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			gameHealthSetting = gameSettings.health
			gameTimeSetting = gameSettings.time
		}

		const leaderboard = loadLeaderboard()
		const newResult = {
			nickname: nickname,
			score: score,
			mode: currentMode,
			date: new Date().toISOString().split('T')[0],
			rounds: questionHistory.length, // –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª-–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
			health: gameHealthSetting, // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
			time: gameTimeSetting, // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
			isChallenge: !!currentChallengeParams, // –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ —ç—Ç–æ –±—ã–ª —á–µ–ª–ª–µ–Ω–¥–∂
		}

		leaderboard.push(newResult)
		leaderboard.sort((a, b) => b.score - a.score) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ—á–∫–∞–º
		const trimmedLeaderboard = leaderboard.slice(0, MAX_LEADERBOARD_ENTRIES)

		try {
			localStorage.setItem(LEADERBOARD_KEY, JSON.stringify(trimmedLeaderboard))
			console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', newResult)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error)
		}
	}

	function displayLeaderboard() {
		const leaderboard = loadLeaderboard()
		leaderboardList.innerHTML = '' // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

		if (leaderboard.length === 0) {
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ —á–µ—Ä–µ–∑ data-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
			leaderboardList.setAttribute(
				'data-translate-empty',
				_('leaderboardEmpty')
			)
			return
		} else {
			leaderboardList.removeAttribute('data-translate-empty')
		}

		leaderboard.forEach((entry, index) => {
			const entryDiv = document.createElement('div')
			entryDiv.classList.add('leaderboard-entry')

			// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
			const modeKey = `mode_${entry.mode}`
			const translatedMode = _(modeKey) || entry.mode // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'mode_capitals' –∏ —Ç.–¥.

			entryDiv.innerHTML = `
          <span class="rank">${index + 1}.</span>
          <span class="nickname" title="${entry.nickname}">${
				entry.nickname
			}</span>
          <span class="details" title="–†–µ–∂–∏–º: ${translatedMode}, ${
				entry.rounds
			} ${_('questionsCount', entry.rounds)}, ‚ù§Ô∏è${entry.health}, ‚è≥${
				entry.time
			}s">${translatedMode}</span>
          <span class="score">${entry.score}</span>
      `
			leaderboardList.appendChild(entryDiv)
		})
	}

	function clearLeaderboard() {
		if (confirm(_('confirmClearLeaderboard'))) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–≤–æ–¥
			try {
				localStorage.removeItem(LEADERBOARD_KEY)
				displayLeaderboard() // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–∫–∞–∂–µ—Ç –ø—É—Å—Ç–æ–µ)
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:', error)
				alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.')
			}
		}
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
	leaderboardBtn.addEventListener('click', openLeaderboardModal)
	closeLeaderboardBtn.addEventListener('click', closeLeaderboardModal)
	clearLeaderboardBtn.addEventListener('click', clearLeaderboard)

	// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
	modeBtns.forEach(btn => {
		btn.addEventListener('click', () => {
			if (btn.classList.contains('active')) return // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ –≤—ã–±—Ä–∞–Ω

			modeBtns.forEach(b => b.classList.remove('active'))
			btn.classList.add('active')
			currentMode = btn.dataset.mode
			currentChallengeParams = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –≤—Ä—É—á–Ω—É—é
			startGame() // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
		})
	})

	// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
	nextBtn.addEventListener('click', getNewQuestion)

	// –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
	playAgainBtn.addEventListener('click', () => {
		// –ï—Å–ª–∏ –±—ã–ª —á–µ–ª–ª–µ–Ω–¥–∂, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∂–µ, –∏–Ω–∞—á–µ - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
		startGame()
	})

	// –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂" (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É)
	createChallengeBtn.addEventListener('click', generateAndCopyChallengeLink)

	// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º" (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ, —Ç.–∫. —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã)
	shareChallengeBtn.addEventListener('click', generateAndCopyChallengeLink)

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
	loadSettings() // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–∑—É
	applyTranslations() // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã

	if (currentChallengeParams) {
		// –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ä–µ–∂–∏–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
		currentMode = currentChallengeParams.mode
		modeBtns.forEach(btn => {
			btn.classList.toggle('active', btn.dataset.mode === currentMode)
		})
		// –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –≤–æ –≤—Ä–µ–º—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		// modeBtns.forEach(btn => btn.disabled = true);
		// createChallengeBtn.disabled = true; // –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ
	} else {
		// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ('capitals')
		modeBtns.forEach(btn => {
			btn.classList.toggle('active', btn.dataset.mode === currentMode)
		})
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º/–∞—Ç—Ä–∏–±—É—Ç–∞–º
	const leaderboardListEl = document.getElementById('leaderboard-list')
	if (leaderboardListEl) {
		leaderboardListEl.setAttribute(
			'data-translate-empty',
			_('leaderboardEmpty')
		)
	}

	currentChallengeParams = getChallengeParamsFromURL()

	startGame() // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–ª–∏–±–æ –æ–±—ã—á–Ω—É—é, –ª–∏–±–æ —á–µ–ª–ª–µ–Ω–¥–∂)
})
