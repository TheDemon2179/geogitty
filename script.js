document.addEventListener('DOMContentLoaded', () => {
	// 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ particlesJS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ DOMContentLoaded
	try {
		if (typeof particlesJS === 'function') {
			particlesJS('particles-js', {
				particles: {
					number: { value: 80, density: { enable: true, value_area: 800 } },
					color: { value: '#4f46e5' },
					shape: {
						type: 'circle',
						stroke: { width: 0, color: '#000000' },
						polygon: { nb_sides: 5 },
					},
					opacity: {
						value: 0.5,
						random: true,
						anim: { enable: true, speed: 1, opacity_min: 0.1, sync: false },
					},
					size: {
						value: 3,
						random: true,
						anim: { enable: true, speed: 2, size_min: 0.1, sync: false },
					},
					line_linked: {
						enable: true,
						distance: 150,
						color: '#4f46e5',
						opacity: 0.2,
						width: 1,
					},
					move: {
						enable: true,
						speed: 1,
						direction: 'none',
						random: true,
						straight: false,
						out_mode: 'out',
						bounce: false,
						attract: { enable: true, rotateX: 600, rotateY: 1200 },
					},
				},
				interactivity: {
					detect_on: 'canvas',
					events: {
						onhover: { enable: true, mode: 'grab' },
						onclick: { enable: true, mode: 'push' },
						resize: true,
					},
					modes: {
						grab: { distance: 140, line_linked: { opacity: 0.5 } },
						bubble: {
							distance: 400,
							size: 40,
							duration: 2,
							opacity: 8,
							speed: 3,
						},
						repulse: { distance: 200, duration: 0.4 },
						push: { particles_nb: 4 },
						remove: { particles_nb: 2 },
					},
				},
				retina_detect: true,
			})
		}
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ particlesJS:', error)
		// –ú–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç #particles-js, –µ—Å–ª–∏ –æ–Ω –º–µ—à–∞–µ—Ç –±–µ–∑ —Å–∫—Ä–∏–ø—Ç–∞
		const particlesElement = document.getElementById('particles-js')
		if (particlesElement) particlesElement.style.display = 'none'
	}

	// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
	const questionEl = document.getElementById('question')
	const optionsEl = document.getElementById('options')
	const feedbackEl = document.getElementById('feedback')
	const nextBtn = document.getElementById('next-btn')
	const scoreEl = document.getElementById('score')
	const streakEl = document.getElementById('streak')
	const progressEl = document.getElementById('progress')
	const modeBtns = document.querySelectorAll(
		'.mode-btn:not(#create-challenge-btn):not(#share-challenge-btn)'
	) // –ò—Å–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞
	const gameContainer = document.querySelector('.game-container')
	const gameInterface = document.getElementById('game-interface')
	const endGameScreen = document.getElementById('end-game-screen')
	const finalScoreEl = document.getElementById('final-score')
	const playAgainBtn = document.getElementById('play-again-btn')
	const challengeInfoEl = document.getElementById('challenge-info')
	const challengeNameEl = document.getElementById('challenge-name')
	const createChallengeBtn = document.getElementById('create-challenge-btn')
	const shareChallengeBtn = document.getElementById('share-challenge-btn')

	// --- –ü–µ—Ä–µ–≤–æ–¥—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª/–æ–±—ä–µ–∫—Ç) ---
	const translations = {
		ru: {
			tagline:
				'–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö –≤–µ—Å–µ–ª—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω! –£–≥–∞–¥—ã–≤–∞–π —Å—Ç–æ–ª–∏—Ü—ã, —Å—Ç—Ä–∞–Ω—ã, —Ñ–ª–∞–≥–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.',
			score: '–°—á–µ—Ç',
			streak: '–°–µ—Ä–∏—è',
			loading: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–∞...',
			nextQuestion: '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
			capitals: '–°—Ç–æ–ª–∏—Ü—ã',
			countries: '–°—Ç—Ä–∞–Ω—ã',
			flags: '–§–ª–∞–≥–∏',
			landmarks: '–ú–µ—Å—Ç–∞',
			correctFeedback: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ',
			incorrectFeedback: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
			gameOver: '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!',
			yourScore: '–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç',
			playAgain: '–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞',
			challengeLoadingError: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–∞.',
			questionLoadError: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–∞: ',
			challengeCreated: '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
			challengeCreationError: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂.',
			createChallenge: '–°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂',
			shareResults: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
			challengePrefix: '–ß–µ–ª–ª–µ–Ω–¥–∂: ',
		},
		// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 'en' –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ–∑–∂–µ
	}
	const currentLang = 'ru' // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
	function _(key) {
		return translations[currentLang][key] || key
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å data-translate
	function applyTranslations() {
		document.querySelectorAll('[data-translate]').forEach(el => {
			const key = el.getAttribute('data-translate')
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º innerText –∏–ª–∏ textContent –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
			if (
				el.tagName === 'BUTTON' ||
				el.tagName === 'P' ||
				el.tagName === 'SPAN' ||
				el.tagName === 'DIV' ||
				el.tagName === 'H2'
			) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ –Ω–µ—Ç, –º–µ–Ω—è–µ–º textContent.
				// –ï—Å–ª–∏ –µ—Å—Ç—å (–∫–∞–∫ —É score/streak), —Ç–æ –∏—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª.
				if (
					el.childNodes.length === 1 &&
					el.childNodes[0].nodeType === Node.TEXT_NODE
				) {
					el.textContent = _(key)
				} else {
					// –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–º–µ—à–∞–Ω —Å –∏–∫–æ–Ω–∫–∞–º–∏/span'–∞–º–∏
					// –ü–æ–∫–∞ –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –∏ –º–µ–Ω—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
					for (let node of el.childNodes) {
						if (
							node.nodeType === Node.TEXT_NODE &&
							node.textContent.trim().length > 0
						) {
							node.textContent =
								_(key) + (['score', 'streak'].includes(key) ? ': ' : '') // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –¥–ª—è —Å—á–µ—Ç–∞/—Å–µ—Ä–∏–∏
							break
						}
					}
				}
			} else if (el.tagName === 'INPUT' && el.type === 'submit') {
				el.value = _(key)
			} else {
				// –î–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞
				el.textContent = _(key)
			}
		})
		// –û–±–Ω–æ–≤–ª—è–µ–º title –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
		const createChallengeTitleKey = 'createChallengeTitle' // –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è title, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if (
			createChallengeBtn &&
			translations[currentLang][createChallengeTitleKey]
		) {
			createChallengeBtn.title =
				translations[currentLang][createChallengeTitleKey]
		} else if (createChallengeBtn) {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ title –Ω–µ –Ω–∞–π–¥–µ–Ω
			createChallengeBtn.title =
				'–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'
		}
	}

	// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã ---
	let currentQuestion = {}
	let acceptingAnswers = true
	let score = 0
	let streak = 0
	let questionCounter = 0
	let allQuestions = [] // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞/—á–µ–ª–ª–µ–Ω–¥–∂–∞
	let availableQuestions = [] // –í–æ–ø—Ä–æ—Å—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
	let questionHistory = [] // ID –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ (–¥–ª—è —à–∞—Ä–∏–Ω–≥–∞)
	let currentMode = 'capitals' // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	let currentChallengeParams = null // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞ {mode: string, ids: string[], name: string}
	const MAX_QUESTIONS = 10 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏–≥—Ä–µ

	// --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON ---
	async function loadQuestions(mode) {
		try {
			const response = await fetch(`data/${mode}.json?v=${Date.now()}`) // –î–æ–±–∞–≤–ª—è–µ–º ?v=timestamp –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`)
			}
			const data = await response.json()
			if (!Array.isArray(data)) {
				throw new Error('Data is not an array')
			}
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ID —É –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ö–æ—Ç—è –±—ã —É –ø–µ—Ä–≤–æ–≥–æ)
			if (data.length > 0 && typeof data[0].id === 'undefined') {
				console.warn(
					`–í–æ–ø—Ä–æ—Å—ã –≤ —Ñ–∞–π–ª–µ data/${mode}.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª—è 'id'. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —á–µ–ª–ª–µ–Ω–¥–∂–µ–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`
				)
			}
			return data
		} catch (error) {
			console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ ${mode}:`, error)
			feedbackEl.textContent = `${_('questionLoadError')}${mode}. ${
				error.message
			}`
			feedbackEl.className = 'feedback incorrect-feedback'
			return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
		}
	}

	// --- –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã ---

	// –ù–∞—á–∞–ª–æ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
	async function startGame() {
		console.log(
			`Starting game. Mode: ${currentMode}`,
			currentChallengeParams ? `Challenge: ${currentChallengeParams.name}` : ''
		)
		questionCounter = 0
		score = 0
		streak = 0
		questionHistory = [] // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
		scoreEl.innerText = score
		streakEl.innerText = streak
		progressEl.style.width = '0%'
		feedbackEl.innerText = ''
		feedbackEl.className = 'feedback'
		nextBtn.style.display = 'none'
		gameInterface.style.display = 'block'
		endGameScreen.style.display = 'none'
		shareChallengeBtn.style.display = 'none' // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —à–∞—Ä–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–∂–∏–º–∞
		allQuestions = await loadQuestions(currentMode)

		if (allQuestions.length === 0 && !currentChallengeParams) {
			questionEl.textContent = _('questionLoadError') + currentMode
			optionsEl.innerHTML = ''
			return // –ù–µ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
		}

		// –ï—Å–ª–∏ —ç—Ç–æ —á–µ–ª–ª–µ–Ω–¥–∂, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
		if (currentChallengeParams) {
			const challengeIds = new Set(currentChallengeParams.ids)
			availableQuestions = allQuestions.filter(q => challengeIds.has(q.id))
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —à–∞—Ä–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
			questionHistory = availableQuestions.map(q => q.id)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ ID –∏–∑ URL –Ω–∞–π–¥–µ–Ω—ã
			if (availableQuestions.length !== challengeIds.size) {
				console.warn(
					'–ù–µ–∫–æ—Ç–æ—Ä—ã–µ ID –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ –¥–∞–Ω–Ω—ã—Ö.'
				)
				// –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			}
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
			if (availableQuestions.length === 0) {
				questionEl.textContent = _('challengeLoadingError')
				optionsEl.innerHTML = ''
				challengeInfoEl.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ
				challengeNameEl.textContent =
					currentChallengeParams.name + ' (–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏)'
				return
			}

			challengeInfoEl.style.display = 'block' // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ
			challengeNameEl.textContent =
				currentChallengeParams.name || `${_('challengePrefix')}${currentMode}`
		} else {
			// –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –±–µ—Ä–µ–º MAX_QUESTIONS —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
			challengeInfoEl.style.display = 'none' // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ
			availableQuestions = getRandomQuestions(allQuestions, MAX_QUESTIONS)
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∏–∑ —ç—Ç–æ–π –∏–≥—Ä—ã
			questionHistory = availableQuestions.map(q => q.id)
		}

		if (availableQuestions.length === 0) {
			// –ï—Å–ª–∏ –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏/–≤—ã–±–æ—Ä–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
			questionEl.textContent = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.'
			optionsEl.innerHTML = ''
			return
		}

		getNewQuestion()
	}

	// –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ N –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
	function getRandomQuestions(sourceArray, count) {
		const shuffled = [...sourceArray].sort(() => 0.5 - Math.random())
		return shuffled.slice(0, Math.min(count, sourceArray.length))
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	function getNewQuestion() {
		// –£—Å–ª–æ–≤–∏–µ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã: –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
		if (availableQuestions.length === 0) {
			return showEndGame()
		}

		questionCounter++
		// –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ *—Ç–µ–∫—É—â–µ–π* –∏–≥—Ä–µ (—á–µ–ª–ª–µ–Ω–¥–∂–µ –∏–ª–∏ MAX_QUESTIONS)
		const totalQuestionsInGame = currentChallengeParams
			? currentChallengeParams.ids.length
			: Math.min(MAX_QUESTIONS, allQuestions.length)
		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ totalQuestionsInGame > 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
		progressEl.style.width =
			totalQuestionsInGame > 0
				? `${(questionCounter / totalQuestionsInGame) * 100}%`
				: '0%'

		// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ *–æ—Å—Ç–∞–≤—à–∏—Ö—Å—è*
		const questionIndex = Math.floor(Math.random() * availableQuestions.length)
		currentQuestion = availableQuestions[questionIndex]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
		if (
			!currentQuestion ||
			typeof currentQuestion.question !== 'string' ||
			!Array.isArray(currentQuestion.options) ||
			typeof currentQuestion.answer !== 'number'
		) {
			console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞:', currentQuestion)
			// –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
			availableQuestions.splice(questionIndex, 1)
			getNewQuestion()
			return
		}

		questionEl.innerText = currentQuestion.question

		optionsEl.innerHTML = '' // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–ø—Ü–∏–∏
		currentQuestion.options.forEach((option, index) => {
			const optionElement = document.createElement('div')
			optionElement.classList.add('option')
			optionElement.dataset.option = index + 1 // –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1
			optionElement.innerText = option
			optionElement.addEventListener('click', selectAnswer)
			optionsEl.appendChild(optionElement)
		})

		// –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
		availableQuestions.splice(questionIndex, 1)

		acceptingAnswers = true
		feedbackEl.innerText = ''
		feedbackEl.className = 'feedback'
		nextBtn.style.display = 'none'
	}

	// –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
	function selectAnswer(e) {
		if (!acceptingAnswers) return
		acceptingAnswers = false

		const selectedOption = e.target
		const selectedAnswer = parseInt(selectedOption.dataset.option) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ

		const isCorrect = selectedAnswer === currentQuestion.answer

		if (isCorrect) {
			incrementScore()
			incrementStreak()
			feedbackEl.innerText = _('correctFeedback')
			feedbackEl.className = 'feedback correct-feedback'
			selectedOption.classList.add('correct')
			createConfetti()
		} else {
			streak = 0 // –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
			streakEl.innerText = streak
			feedbackEl.innerText = `${_('incorrectFeedback')}${
				currentQuestion.options[currentQuestion.answer - 1]
			}`
			feedbackEl.className = 'feedback incorrect-feedback'
			selectedOption.classList.add('incorrect')

			// –ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
			const correctOption = optionsEl.querySelector(
				`.option[data-option="${currentQuestion.answer}"]`
			)
			if (correctOption) {
				correctOption.classList.add('correct')
			}
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
		nextBtn.style.display = 'block'
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
	function showEndGame() {
		gameInterface.style.display = 'none' // –°–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã
		finalScoreEl.innerText = score
		endGameScreen.style.display = 'block' // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		// –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —á–µ–ª–ª–µ–Ω–¥–∂ —Å ID –≤–æ–ø—Ä–æ—Å–æ–≤
		if (currentChallengeParams && questionHistory.length > 0) {
			shareChallengeBtn.style.display = 'inline-block'
		} else {
			shareChallengeBtn.style.display = 'none'
		}
	}

	// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞
	function incrementScore() {
		// –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤: +100 –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, +50 –∑–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–µ—Ä–∏–∏
		score += 100 + streak * 50
		scoreEl.innerText = score
	}

	// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
	function incrementStreak() {
		streak++
		streakEl.innerText = streak
	}

	// –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	function createConfetti() {
		// ... (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ createConfetti)
		for (let i = 0; i < 30; i++) {
			// –£–º–µ–Ω—å—à–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
			const confetti = document.createElement('div')
			confetti.classList.add('confetti')
			// –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ game-container –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
			confetti.style.position = 'absolute' // –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—è
			confetti.style.top = Math.random() * 50 + '%' // –ù–∞—á–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–≤–µ—Ä—Ö—É
			confetti.style.left = Math.random() * 100 + '%'
			confetti.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 60%)`
			confetti.style.width = Math.random() * 8 + 4 + 'px'
			confetti.style.height = confetti.style.width // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–ª–∏ –∫—Ä—É–≥–ª—ã–µ
			confetti.style.opacity = '1'
			confetti.style.borderRadius = '50%'

			gameContainer.appendChild(confetti) // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä—å game-container

			// –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
			const animation = confetti.animate(
				[
					{ transform: 'translateY(0px) rotate(0deg)', opacity: 1 },
					{
						transform: `translateY(${gameContainer.offsetHeight}px) rotate(${
							Math.random() * 720 - 360
						}deg)`, // –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
						opacity: 0,
					},
				],
				{
					duration: Math.random() * 2000 + 1500, // –ù–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
					easing: 'ease-out', // –ü–∞–¥–µ–Ω–∏–µ –ø–æ–¥ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π
				}
			)

			animation.onfinish = () => confetti.remove()
		}
	}

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π ---

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
	function getChallengeParamsFromURL() {
		const params = new URLSearchParams(window.location.search)
		const challengeData = params.get('challenge') // –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "mode,id1,id2,id3..."
		const challengeName = params.get('name')

		if (!challengeData) {
			return null
		}

		try {
			const parts = challengeData.split(',')
			if (parts.length < 2) return null // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∂–∏–º –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID

			const mode = parts[0]
			const ids = parts.slice(1).filter(id => id.trim() !== '') // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ ID

			if (
				!['capitals', 'countries', 'flags', 'landmarks'].includes(mode) ||
				ids.length === 0
			) {
				console.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'challenge':", challengeData)
				return null
			}

			return {
				mode,
				ids,
				name: challengeName ? decodeURIComponent(challengeName) : null,
			}
		} catch (error) {
			console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'challenge':", error)
			return null
		}
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–ª–ª–µ–Ω–¥–∂
	async function generateAndCopyChallengeLink() {
		if (questionHistory.length === 0) {
			alert('–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞.')
			return
		}

		// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–º—è —á–µ–ª–ª–µ–Ω–¥–∂–∞
		const defaultName = `${_('challengePrefix')}${_(currentMode)} (${
			questionHistory.length
		} ${_('questionsCount', questionHistory.length)})` // –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á 'questionsCount' –≤ –ø–µ—Ä–µ–≤–æ–¥—ã
		const challengeName = prompt(
			'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞:',
			defaultName
		)

		if (challengeName === null) return // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"

		const mode = currentMode
		const idsString = questionHistory.join(',')
		const encodedName = encodeURIComponent(challengeName)

		const url = `${window.location.origin}${window.location.pathname}?challenge=${mode},${idsString}&name=${encodedName}`

		try {
			await navigator.clipboard.writeText(url)
			alert(_('challengeCreated')) // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
		} catch (err) {
			console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É: ', err)
			alert(_('challengeCreationError') + '\n' + url) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
		}
	}
	// –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç translations:
	// ru: {
	//     ...
	//     questionsCount: (count) => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
	//         if (count % 10 === 1 && count % 100 !== 11) return '–≤–æ–ø—Ä–æ—Å';
	//         if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) return '–≤–æ–ø—Ä–æ—Å–∞';
	//         return '–≤–æ–ø—Ä–æ—Å–æ–≤';
	//     },
	//     ...
	// }
	// –ò –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤:
	// const defaultName = `${_('challengePrefix')}${_(currentMode)} (${questionHistory.length} ${translations[currentLang].questionsCount(questionHistory.length)})`;

	// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
	modeBtns.forEach(btn => {
		btn.addEventListener('click', () => {
			if (btn.classList.contains('active')) return // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ –≤—ã–±—Ä–∞–Ω

			modeBtns.forEach(b => b.classList.remove('active'))
			btn.classList.add('active')
			currentMode = btn.dataset.mode
			currentChallengeParams = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞ –≤—Ä—É—á–Ω—É—é
			startGame() // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
		})
	})

	// –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"
	nextBtn.addEventListener('click', getNewQuestion)

	// –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞"
	playAgainBtn.addEventListener('click', () => {
		// –ï—Å–ª–∏ –±—ã–ª —á–µ–ª–ª–µ–Ω–¥–∂, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –∂–µ, –∏–Ω–∞—á–µ - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
		startGame()
	})

	// –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂" (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É)
	createChallengeBtn.addEventListener('click', generateAndCopyChallengeLink)

	// –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º" (—Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è, —á—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ, —Ç.–∫. —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã)
	shareChallengeBtn.addEventListener('click', generateAndCopyChallengeLink)

	// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
	applyTranslations() // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
	currentChallengeParams = getChallengeParamsFromURL() // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ –≤ URL

	if (currentChallengeParams) {
		// –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ä–µ–∂–∏–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
		currentMode = currentChallengeParams.mode
		modeBtns.forEach(btn => {
			btn.classList.toggle('active', btn.dataset.mode === currentMode)
		})
		// –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –≤–æ –≤—Ä–µ–º—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		// modeBtns.forEach(btn => btn.disabled = true);
		// createChallengeBtn.disabled = true; // –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ
	} else {
		// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ('capitals')
		modeBtns.forEach(btn => {
			btn.classList.toggle('active', btn.dataset.mode === currentMode)
		})
	}

	startGame() // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–ª–∏–±–æ –æ–±—ã—á–Ω—É—é, –ª–∏–±–æ —á–µ–ª–ª–µ–Ω–¥–∂)
})
